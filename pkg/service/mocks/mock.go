// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/ctuzelov/region-todo/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockToDoTasks is a mock of ToDoTasks interface.
type MockToDoTasks struct {
	ctrl     *gomock.Controller
	recorder *MockToDoTasksMockRecorder
}

// MockToDoTasksMockRecorder is the mock recorder for MockToDoTasks.
type MockToDoTasksMockRecorder struct {
	mock *MockToDoTasks
}

// NewMockToDoTasks creates a new mock instance.
func NewMockToDoTasks(ctrl *gomock.Controller) *MockToDoTasks {
	mock := &MockToDoTasks{ctrl: ctrl}
	mock.recorder = &MockToDoTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDoTasks) EXPECT() *MockToDoTasksMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockToDoTasks) CreateTask(task models.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockToDoTasksMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockToDoTasks)(nil).CreateTask), task)
}

// DeleteTask mocks base method.
func (m *MockToDoTasks) DeleteTask(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockToDoTasksMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockToDoTasks)(nil).DeleteTask), id)
}

// ReadTasks mocks base method.
func (m *MockToDoTasks) ReadTasks(status string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTasks", status)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTasks indicates an expected call of ReadTasks.
func (mr *MockToDoTasksMockRecorder) ReadTasks(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTasks", reflect.TypeOf((*MockToDoTasks)(nil).ReadTasks), status)
}

// UpdateTask mocks base method.
func (m *MockToDoTasks) UpdateTask(id int, task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockToDoTasksMockRecorder) UpdateTask(id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockToDoTasks)(nil).UpdateTask), id, task)
}

// UpdateTaskStatus mocks base method.
func (m *MockToDoTasks) UpdateTaskStatus(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockToDoTasksMockRecorder) UpdateTaskStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockToDoTasks)(nil).UpdateTaskStatus), id)
}
